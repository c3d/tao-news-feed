// ****************************************************************************
//  news_feed2.xl                                                   Tao project
// ****************************************************************************
// 
//   File Description:
// 
//    Implement News Feed.
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2011 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

import RegExp
import NetworkAccess

// ============================================================================
//
//   Theme definition
//
// ============================================================================


// ============================================================================
//
//   News feed definition
//
// ============================================================================

newsfeed_index          -> 0 
newsfeed_count          -> 1
newsfeed_copyright      -> "" 
data newsfeed_title
data newsfeed_date
data newsfeed_category
data newsfeed_picture


newsfeed_horizontal_display X:real,Y:real,W:real,H:real,DX:real,SX:real,Body ->
// ----------------------------------------------------------------------------
//    Display a feed in the given box
// ----------------------------------------------------------------------------
    locally
        newsfeed_horizontal_texture W, H, DX, time * SX,
            color "white"
            Body
        rectangle X, Y, W, H


newsfeed_vertical_display X:real,Y:real,W:real,H:real,DY:real,SY:real,Body ->
// ----------------------------------------------------------------------------
//    Display a feed in the given box
// ----------------------------------------------------------------------------
    locally
        newsfeed_vertical_texture W, H, DY, time * SY,
            color "white"
            Body
        rectangle X, Y, W, H


newsfeed_horizontal_texture W:real, H:real, DX:real, OX:real, Body ->
// ----------------------------------------------------------------------------
//   Draw the input horizontally
// ----------------------------------------------------------------------------
    frame_texture W, H,
        translatex W - OX mod (DX + 2*W)
        if newsfeed_count > 0 then
            newsfeed_index := integer(OX / (DX + 2*W)) mod newsfeed_count + 1
            Body


newsfeed_vertical_texture W:real, H:real, DY:real, OY:real, Body ->
// ----------------------------------------------------------------------------
//   Draw the input horizontally
// ----------------------------------------------------------------------------
    frame_texture W, H,
        translatey H + OY mod (DY + 2*H)
        if newsfeed_count > 0 then
            newsfeed_index := integer(OY / (DY + 2*H)) mod newsfeed_count + 1
            Body


newsfeed_draw_ticker X:real, Y:real, W:real, H:real, DX:real, SX:real ->
// ----------------------------------------------------------------------------
//   Draw the information horizontally
// ----------------------------------------------------------------------------
    newsfeed_horizontal_display X, Y, W, H, DX, SX,
        if newsfeed_is_text newsfeed_title[newsfeed_index] then
            text newsfeed_title[newsfeed_index]
            text "  "
        if newsfeed_is_text newsfeed_category[newsfeed_index] then
            color "red"
            text newsfeed_category[newsfeed_index]
            text "  "
        if newsfeed_is_text newsfeed_date[newsfeed_index] then
            color "green"
            text newsfeed_date[newsfeed_index]


newsfeed_record_url U:text ->
// ----------------------------------------------------------------------------
//    Record the newsfeed at given URL
// ----------------------------------------------------------------------------
    newsfeed_record get_url_text U


newsfeed_record T:text -> 
// ----------------------------------------------------------------------------
//    Record a news feed from a given source
// ----------------------------------------------------------------------------
    // Refresh every second until we get news feed, then every minute
    if T = "" then refresh 1 else refresh 60 

    newsfeed_index := 0 

    regexp_parse_all T, 
        - "<title>Top Stories.*</title>" ->
            false 
        - "<item.*<title>(.*)</title>" -> 
            newsfeed_index := newsfeed_index + 1 
            newsfeed_title [newsfeed_index] := newsfeed_html
        - "<copyright>(.*)</copyright>" -> 
            newsfeed_copyright := newsfeed_html
        - "<pubDate>.*([0-9]+:[0-9]+:[0-9]+.*)</pubDate>" -> 
            newsfeed_date [newsfeed_index] := newsfeed_html
        - "<category>(.*)</category>" -> 
            newsfeed_category [newsfeed_index] := newsfeed_html
        - "img src=&quot;(.*.jpg)&quot;" -> 
            newsfeed_picture [newsfeed_index] := "http:" & regexp_captured 1 
    newsfeed_count := newsfeed_index


newsfeed_html ->
// ----------------------------------------------------------------------------
//   Return the HTML for the current regexp
// ----------------------------------------------------------------------------
   newsfeed_translate_html regexp_captured 1 


newsfeed_translate_html T:text -> 
// ----------------------------------------------------------------------------
//   Translate HTML into text
// ----------------------------------------------------------------------------
    regexp_parse_text T, 
        "[^&]+" -> regexp_captured 0 
        "&quot;" -> """" 
        "&apos;" -> "'" 
        "&amp;copy;" -> unicode_char "xa9" 
        "&amp;amp;" -> "&" 
        "&#(x[a-fA-F0-9]+|[0-9]+);" -> unicode_char regexp_captured 1 
        "&(.*);" -> "&" & regexp_captured 1 & ";" 


newsfeed_is_text T:text -> true
newsfeed_is_text Other  -> false

